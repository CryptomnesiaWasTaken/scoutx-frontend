{"version":3,"sources":["components/Input/EmojiPicker.jsx","components/Input/Input.jsx","components/Options/Options.jsx","components/Confirmation/useConfirmation.jsx","DATE.js","utils/getDateString.js","components/SingleChat/SingleChat.jsx","components/Messenger/Messenger.jsx","pages/Messenger/Messenger.jsx"],"names":["EmojiPicker","forwardRef","ref","setValue","emojiRef","useRef","useImperativeHandle","close","setIsOpen","useState","isOpen","useEffect","emojiPicker","current","addEmoji","e","value","detail","unicode","addEventListener","removeEventListener","className","onClick","open","Input","placeholder","handler","showEmoji","initialValue","submitHandler","preventDefault","trim","onSubmit","type","onChange","target","onFocus","src","sendIcon","alt","Options","options","id","isOptionsVisible","setIsOptionsVisible","handleOutsideClick","document","body","val","optionsIcon","Object","entries","map","i","title","handleClick","Confirmation","show","toggleShow","text","onSuccess","onClose","useConfirmation","setShow","Comp","months","getDateString","date","newDate","Date","getDate","getMonth","getFullYear","SingleChat","message","index","messages","today","createdAt","prevMessageDate","diff","formattedDate","showDate","isEmoji","length","match","send","getHours","getMinutes","Messenger","useSelector","state","user","conversationID","to","chats","socket","usersOnline","users","userDetails","find","chat","_id","customFetch","useFetch","dispatch","useDispatch","scroll","scrollTop","scrollHeight","emit","addMessages","updateChats","lastMessage","deleteChat","ConfirmDelete","toggleDelete","clearMessage","ConfirmClear","profileImage","dp","name","some","u","MessengerPage","navigate","useNavigate","window","innerWidth","style","height","borderRadius","overflow"],"mappings":"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","file":"static/js/8.b8f5421c.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"emoji-picker-element\";\nimport { FaRegKeyboard } from \"react-icons/fa\";\nimport { BsEmojiSmile } from \"react-icons/bs\";\nimport { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useImperativeHandle } from \"react\";\n\nconst EmojiPicker = forwardRef(({ setValue }, ref) => {\n\tconst emojiRef = useRef();\n\n\tuseImperativeHandle(ref, () => ({\n\t\tclose: () => setIsOpen(false),\n\t}));\n\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst emojiPicker = emojiRef.current;\n\t\tconst addEmoji = e => {\n\t\t\tsetValue(value => value + e.detail.unicode);\n\t\t};\n\t\temojiPicker.addEventListener(\"emoji-click\", addEmoji);\n\t\treturn () => {\n\t\t\temojiPicker.removeEventListener(\"emoji-click\", addEmoji);\n\t\t};\n\t}, [setValue]);\n\n\treturn (\n\t\t<div className=\"emoji-picker\">\n\t\t\t<div className=\"opener\" onClick={() => setIsOpen(open => !open)}>\n\t\t\t\t{isOpen ? <FaRegKeyboard /> : <BsEmojiSmile />}\n\t\t\t</div>\n\t\t\t<div className={isOpen ? \"picker open\" : \"picker\"}>\n\t\t\t\t<emoji-picker ref={emojiRef} />\n\t\t\t</div>\n\t\t</div>\n\t);\n});\n\nexport default EmojiPicker;\n","import React, { useState } from \"react\";\nimport { sendIcon } from \"../../assets\";\n\nimport \"./input.css\";\nimport EmojiPicker from \"./EmojiPicker\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\n\nconst Input = ({ placeholder, handler, showEmoji, initialValue = \"\" }) => {\n\tconst submitHandler = async e => {\n\t\te.preventDefault();\n\t\temojiRef.current?.close();\n\t\tif (value.trim()) handler(value.trim());\n\t\tsetValue(\"\");\n\t};\n\tconst [value, setValue] = useState(initialValue);\n\tconst emojiRef = useRef();\n\n\tuseEffect(() => {\n\t\tsetValue(initialValue);\n\t}, [initialValue]);\n\n\treturn (\n\t\t<form className=\"input__box\" onSubmit={submitHandler}>\n\t\t\t{showEmoji && <EmojiPicker setValue={setValue} ref={emojiRef} />}\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={e => setValue(e.target.value)}\n\t\t\t\tonFocus={() => emojiRef.current?.close()}\n\t\t\t/>\n\t\t\t<button type=\"submit\" aria-label=\"submit\">\n\t\t\t\t<img src={sendIcon} alt=\"send\" />\n\t\t\t</button>\n\t\t</form>\n\t);\n};\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { optionsIcon } from \"../../assets\";\nimport \"./options.css\";\n\nconst Options = ({ options, id = \"\" }) => {\n\tconst [isOptionsVisible, setIsOptionsVisible] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst handleOutsideClick = e => {\n\t\t\tif (e.target.id !== \"options\" + id && e.target.id !== \"options__icon\" + id) {\n\t\t\t\tsetIsOptionsVisible(false);\n\t\t\t}\n\t\t};\n\t\tdocument.body.addEventListener(\"click\", handleOutsideClick);\n\t\treturn () => document.body.removeEventListener(\"click\", handleOutsideClick);\n\t}, [id]);\n\n\tconst handleClick = handler => {\n\t\tsetIsOptionsVisible(false);\n\t\thandler();\n\t};\n\n\treturn (\n\t\t<div className=\"options\" id={\"options\" + id} onClick={() => setIsOptionsVisible(val => !val)}>\n\t\t\t<img src={optionsIcon} alt=\"options\" className=\"options__icon\" id={\"options__icon\" + id} />\n\t\t\t<ul className={isOptionsVisible ? \"show\" : \"\"}>\n\t\t\t\t{Object.entries(options).map(([title, handler], i) => (\n\t\t\t\t\t<li onClick={() => handleClick(handler)} key={i}>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default Options;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport \"./confirmation.css\";\n\nconst Confirmation = ({ show, toggleShow, text, onSuccess }) => (\n\t<Backdrop show={show} onClose={toggleShow}>\n\t\t<div className=\"confirmation\">\n\t\t\t<h2>{text}</h2>\n\t\t\t<div className=\"btn-group\">\n\t\t\t\t<button onClick={toggleShow}>Cancel</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"danger\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\ttoggleShow();\n\t\t\t\t\t\tonSuccess();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tYes, I'm sure\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t</Backdrop>\n);\nconst useConfirmation = (onSuccess, text = \"Are Your sure ?\") => {\n\tconst [show, setShow] = useState(false);\n\tconst toggleShow = () => setShow(!show);\n\tconst Comp = <Confirmation show={show} onSuccess={onSuccess} text={text} toggleShow={toggleShow} />;\n\treturn { toggleShow, Confirmation: Comp };\n};\n\nexport default useConfirmation;\n","const months = [\n   \"January\",\n   \"February\",\n   \"March\",\n   \"April\",\n   \"May\",\n   \"June\",\n   \"July\",\n   \"August\",\n   \"September\",\n   \"October\",\n   \"November\",\n   \"December\",\n];\n\nexport { months };\n","import { months } from \"../DATE\";\n\nconst getDateString = date => {\n\tif (!date) return \"\";\n\tlet newDate = new Date(date);\n\tnewDate = `${newDate.getDate()} ${months[newDate.getMonth()]} ${newDate.getFullYear()}`;\n\treturn newDate;\n};\n\nexport default getDateString;\n","import React from \"react\";\nimport getDateString from \"../../utils/getDateString\";\nimport \"./singlechat.css\";\n\nconst SingleChat = ({ message, index, messages }) => {\n\tconst today = new Date();\n\tconst createdAt = new Date(message.createdAt);\n\tconst prevMessageDate = messages[index - 1] && new Date(messages[index - 1]?.createdAt);\n\tconst diff = today.getDate() - createdAt.getDate();\n\tconst formattedDate = getDateString(createdAt);\n\n\tconst date = diff === 1 ? \"YESTERDAY\" : diff === 0 ? \"TODAY\" : formattedDate;\n\tconst showDate = prevMessageDate\n\t\t? createdAt.getDate() - prevMessageDate.getDate() > 0\n\t\t\t? true\n\t\t\t: false\n\t\t: true;\n\n\tconst getTime = () => {\n\t\treturn `${createdAt.getHours()}:${\n\t\t\tcreatedAt.getMinutes() > 9 ? createdAt.getMinutes() : \"0\" + createdAt.getMinutes()\n\t\t}`;\n\t};\n\n\tconst isEmoji = message.text.length === 2 && !message.text.match(/\\w/);\n\treturn (\n\t\t<>\n\t\t\t{showDate && <h4>{date}</h4>}\n\t\t\t<div className={message.send ? \"chat__sent\" : \"chat__recieve\"}>\n\t\t\t\t<p className={isEmoji ? \"emoji message\" : \"message\"}>\n\t\t\t\t\t{message.text}\n\t\t\t\t\t{messages[index + 1]?.send !== message.send && <span className=\"time\">{getTime()}</span>}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default SingleChat;\n","import React, { useEffect, useRef } from \"react\";\nimport useFetch from \"../../hooks/useFetch\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addMessages, clearMessage, deleteChat, updateChats } from \"../../features/messageSlice\";\nimport SingleChat from \"../SingleChat/SingleChat\";\nimport Input from \"../Input/Input\";\nimport { dp } from \"../../assets\";\nimport \"./messenger.css\";\nimport Options from \"../Options/Options\";\nimport useConfirmation from \"../Confirmation/useConfirmation\";\n\nconst Messenger = () => {\n\tconst {\n\t\tuser: { id },\n\t\tmessage: { messages, conversationID, to, chats },\n\t\tsocket: { socket },\n\t\tusers: { usersOnline },\n\t} = useSelector(state => state);\n\n\tconst userDetails = chats?.find(chat => chat._id === conversationID)?.userDetails || {};\n\n\tconst customFetch = useFetch();\n\tconst dispatch = useDispatch();\n\tconst scroll = useRef();\n\n\tuseEffect(() => {\n\t\tif (scroll.current) scroll.current.scrollTop = scroll.current.scrollHeight;\n\t}, [messages]);\n\n\tconst submitHandler = async message => {\n\t\tsocket.emit(\"send message\", message, to, conversationID, id);\n\t\tdispatch(addMessages({ text: message, send: true }));\n\t\tdispatch(updateChats({ id: to, lastMessage: message, customFetch }));\n\t};\n\n\tconst deleteHandler = () => {\n\t\tsocket.emit(\"delete chat\", conversationID, to);\n\t\tdispatch(deleteChat(conversationID));\n\t};\n\tconst clearHandler = () => {\n\t\tsocket.emit(\"clear chat\", conversationID, to);\n\t\tdispatch(clearMessage({ conversationID }));\n\t};\n\n\tconst { Confirmation: ConfirmDelete, toggleShow: toggleDelete } = useConfirmation(\n\t\tdeleteHandler,\n\t\t\"Are you sure, you want to delete this chat\"\n\t);\n\n\tconst { Confirmation: ConfirmClear, toggleShow: toggleClear } = useConfirmation(\n\t\tclearHandler,\n\t\t\"Are you sure, you want to clear this chat\"\n\t);\n\n\tconst options = {\n\t\t\"Delete Chat\": toggleDelete,\n\t\t\"Clear Chat\": toggleClear,\n\t};\n\n\treturn (\n\t\t<section className=\"chat__page__messenger\">\n\t\t\t{conversationID ? (\n\t\t\t\t<>\n\t\t\t\t\t{ConfirmDelete}\n\t\t\t\t\t{ConfirmClear}\n\t\t\t\t\t<header>\n\t\t\t\t\t\t<img src={userDetails.profileImage || dp} alt=\"chatIcon\" className=\"chat__page__dp\" />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3>{userDetails.name}</h3>\n\t\t\t\t\t\t\t{usersOnline.some(u => u.id === userDetails._id) && <p>Online</p>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Options options={options} />\n\t\t\t\t\t</header>\n\t\t\t\t\t<main ref={scroll}>\n\t\t\t\t\t\t<div className=\"messenger\">\n\t\t\t\t\t\t\t{messages.map((message, i, messages) => {\n\t\t\t\t\t\t\t\treturn <SingleChat key={i} message={message} index={i} messages={messages} />;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</main>\n\t\t\t\t\t<footer>\n\t\t\t\t\t\t<Input placeholder=\"Type a message...\" handler={submitHandler} showEmoji />\n\t\t\t\t\t</footer>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<h4>Select a conversation</h4>\n\t\t\t)}\n\t\t</section>\n\t);\n};\n\nexport default Messenger;\n","import React, { useEffect } from \"react\";\nimport Messenger from \"../../components/Messenger/Messenger\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst MessengerPage = () => {\n\tconst style = {\n\t\theight: \"calc(100vh - 9rem)\",\n\t\tborderRadius: \"10px\",\n\t\toverflow: \"hidden\",\n\t};\n\n\tconst navigate = useNavigate();\n\n\tuseEffect(() => {\n\t\tif (window.innerWidth > 800) navigate(\"/chat\");\n\t});\n\n\treturn (\n\t\t<div style={style}>\n\t\t\t<Messenger />\n\t\t</div>\n\t);\n};\n\nexport default MessengerPage;\n"],"sourceRoot":""}